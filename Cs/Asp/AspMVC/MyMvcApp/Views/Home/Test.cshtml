@{
    ViewData["Title"] = "Test";
}
<h1>@ViewData["Title"]</h1>

<p id="userName">UserName</p>

<!-- ボタン -->
<button id="addPanelBtn" class="btn btn-primary">ADD</button>
<button id="removeAllBtn" class="btn btn-danger">REMOVE ALL</button>

<!-- コメント入力欄 -->
<textarea id="commentInput" class="form-control mt-2" placeholder="Enter your comment here"></textarea>

<!-- パネルを格納するコンテナ -->
<div id="panelContainer" class="mt-3"></div>

<style>
    /* コメント入力欄を大きく */
    #commentInput {
        width: 100%;
        height: 100px;
        font-size: 16px;
    }

    /* パネルのテキストサイズを統一 */
    .card-body {
        font-size: 16px;
    }
</style>

<script>
    let maxPanels = 0; // デフォルト値

    // fetchは非同期処理
    fetch('/config.json')
        .then(response => response.json())
        .then(data => {
            maxPanels = data.MaxPanels;
        })
        .catch(error => {
            console.error("設定ファイルの読み込みに失敗しました:", error);
        });

    document.addEventListener("DOMContentLoaded", function () {
        const panelContainer = document.getElementById("panelContainer");
        const addPanelBtn = document.getElementById("addPanelBtn");
        const removeAllBtn = document.getElementById("removeAllBtn");
        const commentInput = document.getElementById("commentInput");
        const userName = document.getElementById("userName").innerText;

        // 追加ボタンクリック時の処理
        addPanelBtn.addEventListener("click", function () {
            let commentText = commentInput.value.trim();
            if (commentText === "") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Please enter a comment before adding a panel.',
                    confirmButtonText: 'OK'
                });
                return;
            }
            if (panelContainer.children.length < maxPanels) {
                // パネルを作成
                const panel = document.createElement("div");
                panel.classList.add("card", "shadow", "p-3", "mt-2");

                // ランダムな背景色を設定（視覚的な変化をつけるため）
                const colors = ["#f8d7da", "#d4edda", "#d1ecf1", "#fff3cd"];
                panel.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];

                // パネルの内容
                panel.innerHTML = `
                <div class="card-body">
                    <h5 class="card-title">${userName}</h5>
                    <p class="card-text">${commentText}</p>
                    <button class="btn btn-danger remove-btn">DELETE</button>
                </div>
                `;

                // パネルを追加
                panelContainer.appendChild(panel);

                // DELETEボタンにイベントリスナーを追加
                const removeBtn = panel.querySelector(".remove-btn");
                removeBtn.addEventListener("click", function () {
                    panel.remove(); // パネルを削除
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'エラー',
                    text: '最大表示数に達しました！',
                    confirmButtonText: 'OK',
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        });

        // REMOVE ALLボタンクリック時の処理
        removeAllBtn.addEventListener("click", function () {
            if (panelContainer.children.length > 0) {
                Swal.fire({
                    title: 'Confirmation',
                    text: "Do you really want to remove all panels?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'REMOVE',
                    cancelButtonText: 'CANCEL'
                }).then((result) => {
                    if (result.isConfirmed) {
                        panelContainer.innerHTML = ''; // 全て削除
                        Swal.fire('Removed', 'All panels have been removed.', 'success');
                    }
                });
            } else {
                Swal.fire({
                    icon: 'info',
                    title: 'Info',
                    text: 'No panels to remove.',
                    confirmButtonText: 'OK',
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        });
    });
</script>
