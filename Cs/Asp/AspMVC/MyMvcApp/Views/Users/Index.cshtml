@model MyMvcApp.Models.Test


<h2 id="userName" class="mb-4"> @Model.Name</h2>

<!-- ボタン -->
<button id="addPanelBtn" class="btn btn-primary">ADD</button>
<button id="removeAllBtn" class="btn btn-danger">REMOVE ALL</button>
<button id="postBtn" class="btn btn-success">POST</button>

<!-- コメント入力欄 -->
<textarea id="commentInput" class="form-control mt-2" placeholder="Enter your comment here"></textarea>

<!-- パネルを追加するコンテナ -->
@* <div id="panelContainer" class="mt-3"></div> *@
@* <div id="panelContainer" class="d-flex container-fluid"> *@
<div id="panelContainer" class="d-flex">
    <div id="left-column" class="w-50"></div>
    <div id="right-column" class="w-50"></div>
</div>

<!-- コメント投稿用モーダル -->
<div class="modal fade" id="commentModal" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="commentModalLabel">Post a Comment</h5>
                <button id="closeModalBtn" type="button" class="btn-close" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <video id="camera" autoplay></video>

                <div class="button-group">
                    <button id="captureBtn" class="btn btn-primary">Capture</button>
                    <button id="fileButton" class="btn btn-primary">File</button>
                </div>

                <canvas id="canvas" style="display: none;"></canvas>
                <input type="file" id="fileInput" accept="image/*" hidden>
                <textarea id="modalCommentInput" class="form-control mt-3"
                    placeholder="Enter your comment..."></textarea>

                <!-- 追加された画像を表示するエリア -->
                <div id="photoContainer"></div>

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelBtn" 　data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="submitComment">Submit</button>
            </div>
        </div>
    </div>
</div>

<script>
    let maxPanels = 0; // デフォルト値

    // fetchは非同期処理
    fetch('/config.json')
        .then(response => response.json())
        .then(data => {
            maxPanels = data.MaxPanels;
        })
        .catch(error => {
            console.error("設定ファイルの読み込みに失敗しました:", error);
        });

    document.addEventListener("DOMContentLoaded", function () {
        const panelContainer = document.getElementById("panelContainer");
        const addPanelBtn = document.getElementById("addPanelBtn");
        const removeAllBtn = document.getElementById("removeAllBtn");
        const commentInput = document.getElementById("commentInput");
        const postBtn = document.getElementById("postBtn");
        const userName = document.getElementById("userName").innerText;
        const modalElement = document.getElementById("commentModal");
        const modalInstance = new bootstrap.Modal(modalElement);

        // 追加ボタンクリック時の処理
        addPanelBtn.addEventListener("click", function () {
            let commentText = commentInput.value.trim();

            //Add panel
            addPanel(commentText);
        });

        // REMOVE ALLボタンクリック時の処理
        removeAllBtn.addEventListener("click", function () {
            if (panelContainer.children.length > 0) {
                Swal.fire({
                    title: 'Confirmation',
                    text: "Do you really want to remove all panels?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'REMOVE',
                    cancelButtonText: 'CANCEL'
                }).then((result) => {
                    if (result.isConfirmed) {
                        document.getElementById("left-column").innerHTML = "";
                        document.getElementById("right-column").innerHTML = "";
                        Swal.fire('Removed', 'All panels have been removed.', 'success');
                    }
                });
            } else {
                Swal.fire({
                    icon: 'info',
                    title: 'Info',
                    text: 'No panels to remove.',
                    confirmButtonText: 'OK',
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        });

        let videoStream = null;
        let cameraStarted = false;

        async function startCamera() {
            try {
                videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
                document.getElementById("camera").srcObject = videoStream;
            } catch (error) {
                console.error("Camera access denied:", error);
            }
        }

        function stopCamera() {
            if (videoStream) {
                const tracks = videoStream.getTracks();
                tracks.forEach(track => track.stop()); // すべてのトラックを停止
                videoStream = null;
                cameraStarted = false; // カメラをリセット
            }
        }

        function takePhoto() {
            const video = document.getElementById("camera");
            const canvas = document.getElementById("canvas");
            const ctx = canvas.getContext("2d");

            if (video.videoWidth === 0 || video.videoHeight === 0) {
                console.error("Video stream not ready");
                return;
            }

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            // `canvas` の画像をデータURL（base64）に変換
            const imageData = canvas.toDataURL("image/png");

            // パネルとして追加
            addImagePanel(imageData);
        }

        // 撮影した画像をパネルとして追加する関数
        function addImagePanel(imageData) {
            const photoContainer = document.getElementById("photoContainer");

            // 画像パネルを作成
            const panel = document.createElement("div");
            panel.classList.add("photo-panel");

            // 画像を追加
            const img = document.createElement("img");
            img.src = imageData;
            img.classList.add("captured-image");

            // バツボタン（×）を追加
            const closeButton = document.createElement("button");
            closeButton.innerHTML = "×";
            closeButton.classList.add("close-btn");

            // 削除ボタンのクリックイベント
            closeButton.addEventListener("click", function () {
                panel.remove();
            });

            // パネルに画像とバツボタンを追加
            panel.appendChild(img);
            panel.appendChild(closeButton);
            photoContainer.appendChild(panel);
        }

        function handlePostClick() {
            document.getElementById("photoContainer").innerHTML = "";

            // 次のフレームで `modalInstance.show();` を実行
            requestAnimationFrame(() => {
                modalInstance.show();
            });

            @* modalInstance.show(); *@
            const closeModalBtn = document.getElementById("closeModalBtn");
            const cancelBtn = document.getElementById("cancelBtn");
            const submitComment = document.getElementById("submitComment");
            const captureBtn = document.getElementById("captureBtn");
            const modalCommentInput = document.getElementById("modalCommentInput");

            // カメラを即座に起動する
            if (!cameraStarted) {
                startCamera();
                cameraStarted = true;
            }

            if (captureBtn) {
                captureBtn.addEventListener("click", takePhoto);
            }

            // 既存のイベントリスナーを削除してから追加
            submitComment.removeEventListener("click", handleSubmit);
            submitComment.addEventListener("click", handleSubmit);

            // Enter キー押下時にも実行
            commentInput.addEventListener("keydown", function (event) {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault(); // 改行を防ぐ
                    handleSubmit();
                }
            });

            // Cancelボタンでカメラ停止
            cancelBtn.addEventListener("click", function () {
                stopCamera();
                modalCommentInput.value = "";
                modalInstance.hide();
                submitComment.removeEventListener("click", handleSubmit);
            });

            // Closeボタンでカメラ停止
            closeModalBtn.addEventListener("click", function () {
                stopCamera();
                modalCommentInput.value = "";
                modalInstance.hide();
                submitComment.removeEventListener("click", handleSubmit);
            });
        }

        // POSTボタンを押したらモーダルを表示
        postBtn.addEventListener("click", handlePostClick);

        document.getElementById('fileButton').addEventListener('click', function () {
            document.getElementById('fileInput').click();
        });

        function handleSubmit() {
            let commentText = modalCommentInput.value.trim();

            if (addPanel(commentText)) {
                stopCamera();
                modalCommentInput.value = "";
                modalInstance.hide();
            }
        }
        // Add panel
        function addPanel(comment) {
            @* console.log("Home：" + comment);
            if (comment == "") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Please enter a comment before adding a panel.',
                    confirmButtonText: 'OK'
                });
                return false;
            } *@

            const panelCount = document.querySelectorAll("#panelContainer .card").length;

            if (panelCount < maxPanels) {
                // パネルを作成
                const panel = document.createElement("div");
                panel.classList.add("card", "shadow", "p-3", "mt-2");
                panel.classList.add("w-50");  // 幅を75%に設定（Bootstrap）

                // パネル番号（1から開始）
                const panelNo = panelCount + 1;
                console.log(panelNo);
                console.log("奇数 or 偶数：" + panelNo % 2);

                // ランダムな背景色を設定（視覚的な変化をつけるため）
                const colors = ["#f8d7da", "#d4edda", "#d1ecf1", "#fff3cd"];
                panel.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];

                // 画像を取得
                const images = photoContainer.querySelectorAll("img"); // すべての画像を取得
                let imageHTML = "";

                if (images.length > 1) {
                    imageHTML += `
                       <div id="carousel-${userName}" class="carousel slide" data-bs-ride="carousel">
                           <div class="carousel-inner">`;

                    images.forEach((img, index) => {
                        imageHTML += `
                           <div class="carousel-item ${index === 0 ? "active" : ""}">
                               @* <img src="${img.src}" class="d-block w-100 rounded" style="max-height: 300px; object-fit: cover;"> *@
                               <img src="${img.src}" class="d-block w-100 rounded square-image">
                           </div>`;
                    });
                    imageHTML += `
                           </div>
                           <button class="carousel-control-prev" type="button" data-bs-target="#carousel-${userName}" data-bs-slide="prev">
                               <span class="carousel-control-prev-icon"></span>
                           </button>
                           <button class="carousel-control-next" type="button" data-bs-target="#carousel-${userName}" data-bs-slide="next">
                               <span class="carousel-control-next-icon"></span>
                           </button>
                       </div>`;
                } else if (images.length === 1) {
                    @* imageHTML = `<img src="${images[0].src}" class="d-block w-100 rounded" style="max-height: 300px; object-fit: cover;">`; *@
                        imageHTML = `<img src="${img.src}" class="d-block w-100 rounded square-image">`;
                }

                // パネルの内容
                panel.innerHTML = `
                <div class="card-body">
                <h5 class="card-title">${userName}</h5>
                ${imageHTML}
                <p class="card-text">${comment}</p>
                <button class="btn btn-danger remove-btn">DELETE</button>
                </div>
                `;

                // **削除ボタンのイベントリスナーを追加**
                panel.querySelector(".remove-btn").addEventListener("click", function () {
                    panel.remove();
                });

                console.log("left-column:", document.getElementById("left-column"));
                console.log("right-column:", document.getElementById("right-column"));

                // **パネルを左カラム or 右カラムに追加**
                console.log("奇数 or 偶数 直前：" + panelNo % 2);
                if (panelNo % 2 === 1) {
                    console.log("LEFT：" + panelNo % 2);
                    document.getElementById("left-column").appendChild(panel); // 奇数 → 左カラム
                } else {
                    console.log("RIGHIT：" + panelNo % 2);
                    document.getElementById("right-column").appendChild(panel); // 偶数 → 右カラム
                }
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'エラー',
                    text: '最大表示数に達しました！',
                    confirmButtonText: 'OK',
                    timer: 3000,
                    timerProgressBar: true
                });
                return false;
            }
            return true;
        }
    });
</script>
